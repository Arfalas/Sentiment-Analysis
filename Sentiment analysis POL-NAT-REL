
import torch
import pandas as pd
import numpy as np
from transformers import BertTokenizer, BertForSequenceClassification
from transformers import Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_recall_fscore_support
from torch.utils.data import Dataset

# Custom Dataset Class for our Data
class NewspaperDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]
        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            truncation=True,
            max_length=self.max_len,
            return_token_type_ids=False,
            padding='max_length',
            return_attention_mask=True,
            return_tensors='pt',
        )
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

# Load and Preprocess Data
def load_data(csv_file, tokenizer, max_len, test_size=0.2):
    df = pd.read_csv(csv_file)
    texts = df['text'].tolist()
    labels = df['label'].tolist()

    # Train-test split
    X_train, X_val, y_train, y_val = train_test_split(texts, labels, test_size=test_size, random_state=42)
    
    train_dataset = NewspaperDataset(X_train, y_train, tokenizer, max_len)
    val_dataset = NewspaperDataset(X_val, y_val, tokenizer, max_len)

    return train_dataset, val_dataset

# Metrics for Evaluation
def compute_metrics(p):
    preds = np.argmax(p.predictions, axis=1)
    precision, recall, f1, _ = precision_recall_fscore_support(p.label_ids, preds, average='weighted')
    acc = accuracy_score(p.label_ids, preds)
    return {
        'accuracy': acc,
        'f1': f1,
        'precision': precision,
        'recall': recall
    }

# Main function
def train_model():
    # Configuration
    MODEL_NAME = 'bert-base-uncased'
    MAX_LEN = 128
    BATCH_SIZE = 16
    EPOCHS = 3
    LEARNING_RATE = 2e-5
    CSV_FILE = 'data/historical_newspapers.csv'

    # Load BERT tokenizer
    tokenizer = BertTokenizer.from_pretrained(MODEL_NAME)

    # Load Data
    train_dataset, val_dataset = load_data(CSV_FILE, tokenizer, MAX_LEN)

    # Load BERT model for Sequence Classification
    model = BertForSequenceClassification.from_pretrained(MODEL_NAME, num_labels=3)

    # Training Arguments
    training_args = TrainingArguments(
        output_dir='./models/bert_antisemitism_model',
        num_train_epochs=EPOCHS,
        per_device_train_batch_size=BATCH_SIZE,
        per_device_eval_batch_size=BATCH_SIZE,
        evaluation_strategy='epoch',
        save_strategy='epoch',
        logging_dir='./logs',
        learning_rate=LEARNING_RATE,
        load_best_model_at_end=True,
        logging_steps=100,
    )

    # Trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_dataset,
        eval_dataset=val_dataset,
        compute_metrics=compute_metrics,
    )

    # Train model
    trainer.train()

    # Save model
    model.save_pretrained('./models/bert_antisemitism_model')
    tokenizer.save_pretrained('./models/bert_antisemitism_model')

if __name__ == '__main__':
    train_model()
